<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Mohammed Saud</title>
        <link>https://saud.gq/posts/</link>
        <description>Recent content in Posts on Mohammed Saud</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 24 Jul 2019 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://saud.gq/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Web Interface for Retroshare - Update 2</title>
            <link>https://saud.gq/posts/2019/07/web-interface-for-retroshare-update-2/</link>
            <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://saud.gq/posts/2019/07/web-interface-for-retroshare-update-2/</guid>
            <description>This is a mirror of a post I wrote on the Freifunk blog.
 I Realized that the visual appearance of the application felt very bland and uninteresting, so I decided to shift some of my focus to the design and visual aspect of the UI. I did plenty of reading about UI/UX design principles and modern best practices during this time. And looks like it turned out pretty well, and is definitely a good improvement from the previous appearance.</description>
            <content type="html"><![CDATA[

<blockquote>
<p>This is a mirror of a <a href="https://blog.freifunk.net/2019/07/22/web-interface-for-retroshare-update-2/">post</a> I wrote on the <a href="https://blog.freifunk.net">Freifunk blog</a>.</p>
</blockquote>


    <img src="/img/blog/retroshare-update-2/rs-login.jpg"  class="left"  />



<p>I Realized that the visual appearance of the application felt very bland and uninteresting, so I decided to shift some of my focus to the design and visual aspect of the UI.
I did plenty of reading about UI/UX design principles and modern best practices during this time.
And looks like it turned out pretty well, and is definitely a good improvement from the <a href="https://blog.freifunk.net/2019/06/23/web-interface-for-retroshare-update-1/">previous</a> appearance.
Also, since this is my first attempt at doing professional-level UX design, there is probably room for improvement, so feedback and suggestions are always welcome.</p>

<p>The general theme has been redone from scratch. I chose this soft blue color palette by taking inspiration from the main app’s look:</p>


    <img src="/img/blog/retroshare-update-2/rs-home.jpg"  class="left"  />



<p>The home tab, along with displaying the user certificate, now also allows to add friends by using their certificates.
It is possible to add friends by copying the certificate contents, dragging and dropping the file, or simply selecting it from the file manager.</p>

<p>Implemented modal messages within the browser that can be used as a popup dialogue box to display any kind of information (here showing information extracted from a Retroshare certificate):</p>


    <img src="/img/blog/retroshare-update-2/rs-modal.jpg"  class="left"  />



<p>As you can see, the navbar has also been revamped.
And the best thing about it? Icons! I along with my mentors agreed on using the <a href="https://fontawesome.com/">Font Awesome</a> icon library, which is open source (licensed with a combination of MIT, CC 4.0 &amp; OFL 1.1 licenses).
I can now utilize icons across the whole app.</p>


    <img src="/img/blog/retroshare-update-2/rs-nav.jpg"  class="left"  />



<p>The downloads tab has also been redesigned.
Now showing all downloads in a slightly different way.
This layout was chosen with extensibility in mind, it can easily be extended to contain a additional file-related settings and chunk views by having an expandable options box for each file.</p>


    <img src="/img/blog/retroshare-update-2/rs-dl.jpg"  class="left"  />



<p>The config tab can now be used to change a lot of the setting options similar to the main app.
Network, node, services, files and people sections from the app have been implemented.
I will shortly finish the remaining sections too.</p>

<p>
    <img src="/img/blog/retroshare-update-2/rs-config-1.jpg"  class="left"  />



    <img src="/img/blog/retroshare-update-2/rs-config-2.jpg"  class="left"  />

</p>

<p>Also notice the tooltip icon. Which when hovered on, gives a brief description about the option. Just like in Retroshare:</p>


    <img src="/img/blog/retroshare-update-2/rs-tooltip.jpg"  class="left"  />



<h2 id="next-steps">Next Steps</h2>

<p>Now that the design is steadily making way for a more detailed and specialized variety of widgets and components, I am working on creating tabs for Network, People, Chats, Mail, Channels &amp; Forums so that the Web Interface can finally become a fully usable alternative to the main client app.</p>

<p>You can try out the Web Interface by cloning it from the repository: <a href="https://github.com/RetroShare/RSNewWebUI">https://github.com/RetroShare/RSNewWebUI</a>, and my fork: <a href="https://github.com/rottencandy/RSNewWebUI">https://github.com/rottencandy/RSNewWebUI</a>.
Again, I am always happy to receive feedback and suggestions for improving the Web Interface.</p>
]]></content>
        </item>
        
        <item>
            <title>Web Interface for Retroshare - Update 1</title>
            <link>https://saud.gq/posts/2019/06/web-interface-for-retroshare-update-1/</link>
            <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://saud.gq/posts/2019/06/web-interface-for-retroshare-update-1/</guid>
            <description>This is a mirror of a post I wrote on the Freifunk blog.
 Since the first post, there has been quite a lot of progress on development of the new Web Interface for Retroshare.
As the build process is not using any JavaScript-specific tools, I spent a lot of time making sure that the development process was made as streamlined as possible. All the components are logically isolated and functionality moved to their relevant places.</description>
            <content type="html"><![CDATA[

<blockquote>
<p>This is a mirror of a <a href="https://blog.freifunk.net/2019/06/23/web-interface-for-retroshare-update-1/">post</a> I wrote on the <a href="https://blog.freifunk.net">Freifunk blog</a>.</p>
</blockquote>

<p>Since the <a href="https://blog.freifunk.net/2019/05/23/a-new-web-interface-for-retroshare/">first post</a>, there has been quite a lot of progress on development of the new Web Interface for Retroshare.</p>

<p>As the build process is not using any JavaScript-specific tools, I spent a lot of time making sure that the development process was made as streamlined as possible.
All the components are logically isolated and functionality moved to their relevant places.
Using <a href="https://mithril.js.org/">mithril</a> also helped a lot, which has this concept of <a href="https://mithril.js.org/components.html">components</a>, a mechanism to encapsulate different parts of views.
Which massively helps in project organization and code reuse.</p>

<p>One more important feature which was completed is automatic data refresh and redrawing of views.
I decided to use a combination of mithril’s <a href="https://mithril.js.org/lifecycle-methods.html">lifecycle methods</a> and JavaScript’s browser <code>setTimeout</code> method that can be used to create background tasks which when attached to their respective components, will periodically fetch and refresh data.
The background task gets activated whenever a component’s view is rendered and gets killed when a component goes off of display.
Mithril also has it’s own <a href="https://mithril.js.org/autoredraw.html">auto-redraw</a> system which refreshes views when a component’s event handlers are called.
But it does not refresh when component attributes are updated, or when raw promises are resolved.</p>

<p>Here are a few screenshots displaying the new UI style:</p>

<p>
    <img src="/img/blog/retroshare-update-1/rs-login.png"  class="left"  />



    <img src="/img/blog/retroshare-update-1/rs-home.png"  class="left"  />



    <img src="/img/blog/retroshare-update-1/rs-dloads.png"  class="left"  />

</p>

<h2 id="next-steps">Next Steps</h2>

<p>Along with the goals displayed in the first post, these will be given a higher priority for completion during the coming phase leading up to the next evaluation:</p>

<ul>
<li>Node panel in config tab for handling most(if not all) network settings like node information, Net mode, NAT, Download limits, ports, etc.</li>
<li>Shares panel showing shared files, allowing to edit them, set view permissions, among other options.</li>
<li>Peers tab to display connected peers and set their reputations.</li>
<li>Modify the main Retroshare client to enable/disable the WebUI.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>A new Web Interface for Retroshare</title>
            <link>https://saud.gq/posts/2019/05/a-new-web-interface-for-retroshare/</link>
            <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://saud.gq/posts/2019/05/a-new-web-interface-for-retroshare/</guid>
            <description>This is a mirror of a post I wrote on the Freifunk blog.
 The Retroshare communication platform already has a preliminary web interface. But it is severely limited, supports only the basic of interactions with the client, and does not have the nice design and beautiful visual interface that the modern web platform makes possible. This GSoC project will be about creating an entirely new web interface for Retroshare using it’s JSON API to handle all communication between the WebUI and the client.</description>
            <content type="html"><![CDATA[

<blockquote>
<p>This is a mirror of a <a href="https://blog.freifunk.net/2019/05/23/a-new-web-interface-for-retroshare">post</a> I wrote on the <a href="https://blog.freifunk.net">Freifunk blog</a>.</p>
</blockquote>

<p>The Retroshare communication platform already has a preliminary web interface.
But it is severely limited, supports only the basic of interactions with the client, and does not have the nice design and beautiful visual interface that the modern web platform makes possible.
This GSoC project will be about creating an entirely new web interface for Retroshare using it’s JSON API to handle all communication between the WebUI and the client.</p>

<h2 id="about-me">About Me</h2>

<p>My name is Saud, I’m a third-year undergraduate student in Computer Science at Alliance University, Bangalore, India. This is my first time participating as a student in GSoC as well as my first time being involved in the Freifunk community.</p>

<h2 id="project-breifing">Project breifing</h2>

<p>The Web Interface is planned to be made in such a way that all communication with the client happens through the JSON API. As such, It will be made using JavaScript.</p>

<p>The <a href="https://mithril.js.org">Mithril</a> web framework has been chosen chosen for designing the front-end as well as handling the API calls.
Mithril is a very lightweight and fast client-side framework and is especially used for building single-page applications.
It also provides neatly integrated and customizable XHR capabilities out of the box.</p>

<p>The old Web UI communicates with the client app entirely through the deprecated libresapi.
The new UI will instead be using the JSON API for communication.
The JSON API has already been implemented using <a href="https://rapidjson.org">Rapidjson</a>.
This makes it relatively easier to add new API headers to extend the interface and support more functionality.</p>

<p>Apart from this, one more important thing to keep in mind is that the WebUI is planned to replace the old interface and hopefully be shipped along with the main Retroshare app.
And so it would make sense to keep dependencies to a minimum.
This app will have a development process different from typical modern web dev practices.
This app will not have dependencies(such as Nodejs), making it lightweight and able to easily integrate into the parent app’s build process.</p>

<p>A minimal working example has been implemented and can be seen in the source page.</p>

<p>Project source: <a href="https://github.com/RetroShare/RSNewWebUI">https://github.com/RetroShare/RSNewWebUI</a></p>

<p>My fork: <a href="https://github.com/rottencandy/RSNewWebUI">https://github.com/rottencandy/RSNewWebUI</a></p>

<h2 id="overview">Overview</h2>

<p>A brief overview of the main goals to be expected from the project:</p>

<ul>
<li>A “tab” system to display different sections of the Retroshare interface.</li>
<li>Detailed and asynchronously updating tabs about file transfers, downloads, adding peers, internal statistics, etc.</li>
<li>Options in the client app to enable and launch the WebUI.</li>
<li>A config panel with detailed frames for viewing and changing as many configuration options as possible.</li>
<li>Styled UI using CSS for a more sleek and beautiful look that adds to the visual appeal.</li>
<li>Replace the old WebUI and disable libresapi on merge.</li>
</ul>

<p>The web interface would be extremely beneficial to the community, allowing Retroshare to leverage the flexibility and approachability of the web.
It could be used by people who desire an alternate interface to Retroshare, for example, when using the nogui version,
or due to the traditional GUI client being too demanding on low spec hardware, or due to the OS having problems with Qt, etc.</p>

<p>Looking forward to an exciting summer working on this project. I will post more updates soon.</p>
]]></content>
        </item>
        
    </channel>
</rss>
